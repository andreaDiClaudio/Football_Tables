Type System: C# is a strongly typed language. Every variable and constant has a type, as does every expression that evaluates to a value. Every method declaration specifies a name, the type and kind (value, reference or output) for each input parameter and for the return value.
Null Handling: Normally in Java we would do: if (x == "null"){} but in C# we can take care of this from a different approach. First of all we can do string? x; meaning that maybe x will be null. And then, to check for null we just do x ??= 10;. If x is null, we add a value to it this way. This is the way to check for null in C#.
String Interpolation: Provides a more readable, convenient syntax to format strings. Console.WriteLine($"Hello, {name}!");
Pattern Matching: Is a technique where you test an expression to determine if it has certain characteristics. Provides more concise syntax for testing expressions and taking action when an expression matches. You can use it to check for null (if x is null), checking for not null (if x is not null) [Constant Pattern]. You have [Declaration Pattern] where you check if something is of some type, for example: if (n is int number) checks if n is of type int, and if it is, gives number the value of n. You also have [Property Pattern] where you compare a variable with a specific type and comparing their values (let's say you have a triangle, then you can check (if triangle is Triange { Base: 4, Height: 6} specificTriangle)).
Classes, Structs and Enums: Structs are symple types whose primary purpose is to store data values. Enums 
