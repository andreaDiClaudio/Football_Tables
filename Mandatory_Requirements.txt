------------------------
1. Type System: C# is a strongly typed language. Every variable and constant has a type, as does every expression that evaluates to a value. Every method declaration specifies a name, the type and kind (value, reference or output) for each input parameter and for the return value. -DONE

------------------------
2. Null Handling: Normally in Java we would do: if (x == "null"){} but in C# we can take care of this from a different approach. First of all we can do string? x; meaning that maybe x will be null. And then, to check for null we just do x ??= 10;. If x is null, we add a value to it this way. This is the way to check for null in C#. //TODO

------------------------
3. String Interpolation: Provides a more readable, convenient syntax to format strings. Console.WriteLine($"Hello, {name}!"); DONE

------------------------
4. Pattern Matching: Is a technique where you test an expression to determine if it has certain characteristics. Provides more concise syntax for testing expressions and taking action when an expression matches. You can use it to check for null (if x is null), checking for not null (if x is not null) [Constant Pattern]. You have [Declaration Pattern] where you check if something is of some type, for example: if (n is int number) checks if n is of type int, and if it is, gives number the value of n. You also have [Property Pattern] where you compare a variable with a specific type and comparing their values (let's say you have a triangle, then you can check (if triangle is Triange { Base: 4, Height: 6} specificTriangle)). DONE(is an if statement enough?)

------------------------
5. Classes,:n C#, a class is a blueprint or template for creating objects that share common characteristics and behavior. DONE

------------------------
5.2. Structs:In C#, a struct is a value type that can encapsulate data and related functionality. It is similar to a class, but with some key differences.
One of the main differences between a struct and a class is that a struct is a value type, whereas a class is a reference type. This means that when you create a new instance of a struct, it is allocated on the stack, whereas a class instance is allocated on the heap. This can have performance implications, as accessing stack memory is generally faster than accessing heap memory.
Another difference is that a struct cannot be inherited, whereas a class can. Additionally, structs cannot have a default parameterless constructor, and they cannot declare a destructor.
Example: 
public struct Point
{
    public int X;
    public int Y;

    public Point(int x, int y)
    {
        X = x;
        Y = y;
    }
}

------------------------
5.3 Enums: In C#, an enum (short for "enumeration") is a value type that represents a set of named constants [1]. It allows you to define a list of named values that can be used in your code, which can make your code more readable and maintainable.
Here's an example of an enum in C#:

public enum DayOfWeek
{
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday
}

------------------------
6. Properties:In C#, properties provide a flexible mechanism to read, write or compute the value of a private field. A property definition contains declarations for a get and set accessor that retrieves and assigns the value of the property. They combine aspects of both fields and methods, and to the user of an object, a property appears to be a field, accessing the property requires the same syntax. - DONE

Named and Optional parameter: Named and optional parameters are features in C# that allow you to specify parameter values by name instead of by position, and to provide default values for parameters [1].

Named parameters allow you to specify the name of the parameter you want to assign a value to, rather than relying on the order of the parameters in the method signature. Here's an example:

public void PrintPersonInfo(string name, int age, string city)
{
    Console.WriteLine($"Name: {name}, Age: {age}, City: {city}");
}

// Calling the method with named parameters
PrintPersonInfo(age: 30, name: "John", city: "New York");

Tuples and decostruction: In C#, a tuple is a data structure that allows for the ad-hoc, ordered grouping of some values. They are used when you need to group values together, but don't want to create a specific class for them. Deconstruction of tuples is a feature in C# that allows you to assign the values of a tuple to individual variables. This lets you unpackage all the items in a tuple in a single operation. In addition to tuples, you can also use deconstruction with other types, such as objects.

Example: 
// Define a tuple
var person = (Name: "John", Age: 30, City: "New York");

// Deconstruct the tuple
var (name, age, city) = person;

// Access the individual values
Console.WriteLine($"Name: {name}, Age: {age}, City: {city}");

------------------------
7. Exception: In C#, an exception is an object that represents an error condition that occurs during the execution of a program.

Attributes:In C#, attributes are a way of associating metadata with a class, method, property, or other program element. Attributes provide a way to add declarative information to code, which can be used by other parts of the program, such as libraries or frameworks.

Attributes are defined using the square bracket syntax, like this:

[AttributeUsage(AttributeTargets.Class)]
public class MyAttribute : Attribute
{
    // Attribute implementation
}

Data Validation: Data validation, on the other hand, is the process of ensuring that data is valid and meets certain criteria. In C#, data validation is often performed using attributes. For example, the Required attribute can be used to indicate that a property or field is required, while the RegularExpression attribute can be used to specify a regular expression that the data must match.

Here's an example of using attributes for data validation:

public class Person
{
    [Required]
    public string Name { get; set; }

    [Range(0, 150)]
    public int Age { get; set; }
}

------------------------
8. Arrays / Collections: arrays and collections are both used to store a group of values or objects. 

------------------------
9. Ranges:is a new feature introduced in C# 8.0 that allows you to specify a range of values in an array or collection. A range is defined using the .. operator, which specifies the start and end indices of the range.

Here's an example of using ranges with an array:

int[] numbers = { 0, 1, 2, 3, 4, 5 };
int[] range = numbers[2..4]; // get elements at index 2 and 3
------------------------
10. Generics: is a feature in C# that allows you to define classes, interfaces, and methods that work with any data type, rather than a specific one. This means that you can write code that is more flexible and reusable, since it can work with a variety of different types.
Generics are declared using angle brackets (<>) and a type parameter.